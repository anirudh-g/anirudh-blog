{
  
    
        "post0": {
            "title": "My learning paradigm",
            "content": "My learning paradigm . Long term consistency trumps short term intensity - Bruce Lee . This quote has formed the basis of my learning ever since my undergraduate days. However, it does not convey the full story here. Its because keeping up the motivation to learn in the long-term can be tough. Also, what is even more difficult is to remember a concept or a technique that you learnt 6-months ago. . Why am I saying all this? . Good question! I am here to share my learning paradigm that helps me keep motivation and memory in order to achieve long-term consistency in learning. There a few things which I follow : . 1. The Solution approach . 2. Spaced Repetition . The Solution approach . It is easy to loose motivation when you don’t work towards a target. For me, a target is a solution that can help solve an issue or make life easy for anyone who is using it. . Therefore, I follow these 2 steps: . Define the final solution that I want to create | Work backwards to figure out the steps that can enable me to build the best possible solution, given the resources | With this solution-based approach, I now have a target to work towards. In that process, I tend go out of my way to learn new tools and techniques to make my solution possible. . This appraoch helps keep up my motivation while also allowing me to get more learning out of the project than I originally intended to. . Spaced Repetition . It is human nature to forget things that we don’t use in our day-to-day life. Do I still remember my 12th grade physics concepts? Ofcourse not. Its because physics is not my area of study and as a result I never had the chance to use the learnings in my day-to-day work. . So getting a certificate on something but not using the learnings from it for a long-time means you forget all the knowledge you gained. Also in the that time, there can be updates or even groundup overhaul which makes your re-learning that much more difficult. . Therefore, I follow spaced repetition. That is: . I learn a concept by taking extensive notes about it | Then after a few months, I either re-read those notes or parts of the original material | With this spaced repetition, after a few iterations, the learning gets drilled into my brain that I almost always have everything at the top of my head. This makes the subsequent work and building on my existing knowledge as easy as riding a bike. . By using these 2 paradigms, I keep the long-term consistency in my learning journey. . Thanks for reading the post. I hope it was of some help to you. If you liked the work, kindly consider sharing the article. Cheers and stay safe! . Footnote - I am currently reading the book “Deep learning for Coders by Dr.Jeremy Howard”. So, do check back the website in a few weeks for a concise review of the same. .",
            "url": "https://anirudh-g.github.io/anirudh-blog/educational/computer%20science/general/2021/11/08/mylearningparadigm.html",
            "relUrl": "/educational/computer%20science/general/2021/11/08/mylearningparadigm.html",
            "date": " • Nov 8, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://anirudh-g.github.io/anirudh-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I am Anirudh Gokulaprasad, a full stack Data Scientist with industry experience in building Analytics &amp; Machine learning based solutions in BFSI and Life Science domains. . My Skill set includes: . Programming Languages - Python, SQL | APIs/Framworks - Scikit-learn, XGBoost, LightGBM, CatBoost, Tensorflow-Keras, Fast.ai, Nvidia Rapids (cuDF &amp; cuML), Optuna, Git, DVC, Streamlit and Docker | Tools - Excel, Tableau, PowerBI | ML Platforms - DataRobot, Azure ML Studio | . I actively learn and contribute on open source data science platforms: . Kaggle - 2x Expert (Notebooks &amp; Discussions) | MachineHack - Champion | . My goal is to build innovative ML products/solutions and help make data-driven decisions using my expertise as Data Scientist . Work Experience . Data Scientist at Cognizant-Scorg 🇮🇳 Sep 2021 - Present | Data Analyst Trainee at Prodian Infotech 🇮🇳 Dec 2020 - Aug 2020 | . Academic Background . MS Data Science, University of Glasgow 🇬🇧 Class of 2020 | B.Tech CSE, SRM University 🇮🇳 Class of 2019 | Global Academic Internship Program on Data Science &amp; Machine learning, National University of Singapore 🇸🇬 Dec 2018 | . You can find me at LinkedIn, Twitter and Kaggle .",
          "url": "https://anirudh-g.github.io/anirudh-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": "Hello and welcome to my portfolio site and blog. . I am Anirudh Gokulaprasad, a full stack Data Scientist with industry experience in building Analytics &amp; Machine learning based solutions in BFSI and Life Science domains. . Check out the about section to know more about me. . Find my recent blog posts below. . Posts .",
          "url": "https://anirudh-g.github.io/anirudh-blog/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://anirudh-g.github.io/anirudh-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}